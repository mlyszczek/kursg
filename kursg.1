.TH "KURSG" "1" "18 January 2018 (v1.0.0)" "bofc.pl"
.SH NAME
.PP
.B kursg
-
.BR kur winet
.BR s ite
.BR g enerator.
Generates simple static webpages from markdown and html files.
.SH SYNOPSIS
.PP
kursg [options]
.SH OPTIONS
.PP
.TP
.B -h
print this help message and exit.
.TP
.B -i
.RI  < "path" >
directory to process
.TP
.B -o
.RI < "path" >
output directory
.TP
.B -d
delete output directory before generating
.SH DESCRIPTION
.PP
.B kursg
is very simple static site generator.
It's purpose is to create sites that focus on content rather than look or
dynamic javascript features.
Main strength of this program is that creating source for site is very easy,
just create one simple control file and bunch of markdown or html and
then run
.B kursg
on that directory and you're done.
.SH "GENERATION RULES"
.PP
.B BASIC USAGE
.RS
In the most basic usage program simply iterates through all
.BR markdown ,
.B html
files and
.B directories
and for each file creates static site.
.PP
Consider following source tree with \fBmarkdown\fR files
.PP
.EX
    .
    ├── header.in
    ├── footer.in
    ├── index.in
    ├── index.md
    ├── sub1
    │   ├── page1.md
    │   └── page2.md
    ├── sub2
    │   └── page3.md
    └── sub3
        ├── page4.md
        ├── page5.md
        ├── page6.md
        └── sub4
            ├── page7.md
            └── page8.md
.EE
.PP
For such source, following structure of
.B html
files will be generated.
.PP
.EX
    .
    ├── index.html
    ├── sub1
    │   ├── page.html
    │   └── page2.html
    ├── sub1.html
    ├── sub2
    │   └── page3.html
    ├── sub2.html
    ├── sub3
    │   ├── page4.html
    │   ├── page5.html
    │   ├── page6.html
    │   ├── sub4
    │   │   ├── page7.html
    │   │   └── page8.html
    │   └── sub4.html
    └── sub3.html
.EE
.PP
Using above source tree and
.B ./sub3/sub4/page7.md
file following site will be generated
.PP
.EX
    +------------------------------------------------------------------+
    | header                                                           |
    +-------+-------+-------+------------------------------------------+
    | index | page4 | page7 | <contents of page7.md file>              |
    | sub1  | page5 | sute8 |                                          |
    | sub2  | page6 |       |                                          |
    | sub3  | sub4  |       |                                          |
    +-------+-------+-------+------------------------------------------+
    | footer                                                           |
    +------------------------------------------------------------------+
.EE
.PP
Output directory structure will be same as input, so if program finds
.B sub3/page4.md
file in input, in output directory
.B sub3/page4.html
file will be created.
.PP
Menu is generated for each directory in path in cascade style.
Each file or directory will have exactly one entry in menu based on directory
structure.
You can think of menu as of some kind of file system that presents directories
and files.
If file
.B ./sub3/sub4/page7.md
is parsed, program will generate links for all files in root directory
.BR .\/ ,
then
.B sub3
and then for
.BR sub4 .
Each directory will have matching
.B html
file generated.
This file will contain menu for all directories in path and some content based
on options.
.PP
To better understand this behaviour let's follow parsing flow for file
.BR ./sub3/sub4/page7.md :
.PP
First header is generated from
.B header.in
file.
Then we generate menu listing all files and directories in root directory
.PP
.EX
    +------------------------------------------------------------------+
    | header                                                           |
    +-------+----------------------------------------------------------+
    | index |
    | sub1  |
    | sub2  |
    | sub3  |
    +-------+
.EE
.PP
Then program goes to another directory in path, that is
.BR sub3,
and its menu is appended next to first one.
Generation rules for all menus are the same - a simple list of files and
directories
.PP
.EX
    +------------------------------------------------------------------+
    | header                                                           |
    +-------+-------+--------------------------------------------------+
    | index | page4 |
    | sub1  | page5 |
    | sub2  | page6 |
    | sub3  | sub4  |
    +-------+-------+
.EE
.PP
By analogy, next directory is parsed, that is
.B sub4
and we get
.PP
.EX
    +------------------------------------------------------------------+
    | header                                                           |
    +-------+-------+-------+------------------------------------------+
    | sub1  | page4 | page7 |
    | sub2  | page5 | sute8 |
    | sub3  | page6 |       |
    | page0 | sub4  |       |
    +-------+-------+-------+
.EE
.PP
Finally, we detect that
.B page7.md
is a file, and we generate
.B html
from that file and we append it to the site.
.PP
.EX
    +------------------------------------------------------------------+
    | header                                                           |
    +-------+-------+-------+------------------------------------------+
    | sub1  | page4 | page7 | <contents of page7.md file>              |
    | sub2  | page5 | sute8 |                                          |
    | sub3  | page6 |       |                                          |
    | page0 | sub4  |       |                                          |
    +-------+-------+-------+------------------------------------------+
.EE
.PP
And last but not least, footer is appended and we get complete site.
.PP
.EX
    +------------------------------------------------------------------+
    | header                                                           |
    +-------+-------+-------+------------------------------------------+
    | index | page4 | page7 | <contents of page7.md file>              |
    | sub1  | page5 | sute8 |                                          |
    | sub2  | page6 |       |                                          |
    | sub3  | sub4  |       |                                          |
    +-------+-------+-------+------------------------------------------+
    | footer                                                           |
    +------------------------------------------------------------------+
.EE
.RE
.PP
.B MATCHING FILES
.RS
Matching file is a file which has same name (excluding extension) as directory
in the same folder. ie:
.PP
.EX
    .
    ├── sub1.md
    └── sub1
        └── page1.md
.EE
.PP
Normally,
.B kursg
would automatically generate
.B sub1.html
page with content of
.BR page1.md .
By providing
.IR "matching file" ,
.B sub1.html
will be generated with contents of
.B sub1.md
file.
.B page1.md
will still be reachable from
.B sub1.html
file from menu.
.RE
.PP
.B DIRECTORIES WITHOUT FILES
.RS
If needed, directories can contain only other directories and no
.B markdown
or
.B html
files.
If that is the case,
.B kursg
will try to find any file it could use as content-file.
.PP
Consider following source tree:
.PP
.EX
    .
    ├── index.md
    ├── sub1
    │   ├── page1.md
    │   └── sub2
    │       └── sub3
    └── sub2
        ├── sub5
        ├── sub6
        │   └── sub8
        │       └── page2.md
        └── sub7
            └── page3.md
.EE
.PP
With such tree main page will look like this:
.PP
.EX
    +------------------------------------------------------------------+
    | header                                                           |
    +-------+----------------------------------------------------------+
    | index | <contents of index.md file>                              |
    | sub1  |                                                          |
    | sub2  |                                                          |
    +-------+----------------------------------------------------------+
    | footer                                                           |
    +------------------------------------------------------------------+
.EE
.PP
Now when opening site
.B sub1
we'll see
.PP
.EX
    +------------------------------------------------------------------+
    | header                                                           |
    +-------+-------+--------------------------------------------------+
    | index | page1 | <contents of page1.md file >                     |
    | sub1  |       |                                                  |
    | sub2  |       |                                                  |
    +-------+-------+--------------------------------------------------+
    | footer                                                           |
    +------------------------------------------------------------------+
.EE
.PP
Note that
.B sub2
and
.B sub3
were not included in menu, that is because menu entry is not generated if there
are no useful files that could be used as content, and genereting empty links
has no real value.
.PP
If we open
.B sub2
page, we'll see this
.PP
.EX
    +------------------------------------------------------------------+
    | header                                                           |
    +-------+-------+-------+-------+----------------------------------+
    | index | sub6  | sub8  | page2 | <contents of page2.md file>      |
    | sub1  | sub7  |       |       |                                  |
    | sub2  |       |       |       |                                  |
    +-------+-------+-------+-------+----------------------------------+
    | footer                                                           |
    +------------------------------------------------------------------+
.EE
.PP
Entry for
.B sub5
was not generated, because it is empty.
.BR sub6 ,
altough empty, was generated because there was at least one usable file
somewhere in the directories below.
.BR sub6 ,
.B sub8
and
.B page2
will render same page.
.RE
.PP
.B LINKS RULES
.RS
Links can both relative or absolute.
Absolute links are not recommended, as such links will not be reachable when
site is viewed directly via files, and not by www server.
Links should always point to generated
.B html
files.
.RE
.SH "META FIELDS"
.PP
All
.BR markdown ,
.B html
or
.B .kursg-info
files can contain some meta fields to tune how to generate that file.
All fields are optionally.
.PP
Since all files have different syntax, each file type need to define these
fields differently.
Syntax with examples for each filetype is
.PP
.B markdown
.RS
.BI [kursg-meta]:\ #\ ( "<field-name>" :\  "<field-value>" )
.PP
.EX
    [kursg-meta]: # (title: about me)
    [kursg-meta]: # (order: 3)
.EE
.RE
.PP
.B html
.RS
.BI <!--\ [kursg-meta: "<field-name>" ]\  "<field-value>" \ -->
.PP
.EX
    <!-- [kursg-meta:title] about me -->
    <!-- [kursg-meta:order] 3 -->
.EE
.RE
.PP
.B .kursg-info file
.RS
.IB <field-name> ": " <field-value>
.PP
.EX
    title: about me
    order: 3
.EE
.RE
.PP
.B title
.RS
Name of the entry in menu that will link to file.
If this is not set, file name will be used instead
.RE
.PP
.B order
.RS
Order in which menu entry will appear in menu.
Lower value means higher priority and entry will be put earlier in <li>
.RE
.PP
.B index
(only available in
.B .kursg-info
file)
.RS
If directory has no matching file (see
.B .kursg-info
in
.B CONTROL FILES
for more information about what is a matching file) this file will be used to
generate content when generating site for this directory.
If this option is not passed, first found file (alphabetically) will be used
instead.
If no files are inside folder,
.B kursg
will try to find proper file recursively.
File must be in the same directory as
.B .kursg-info
so entry
.B filename.md
is allowed by
.B directory/filename.md
is invalid.
.RE
.SH "CONTROL FILES"
.PP
Control files are used to tune how site will be generated.
Only
.B index.in
file is mandatory
.PP
.B index.in
(mandatory)
.RS
Mandatory file, defines most basic information like title of style.
Format of the file is 'key="value"' (note there is no space between key, = and
"value").
Following keys are supported
.   PP
.   B in_title
.   RS
Site title, will be put in <title> tag in every html page
.   RE
.   PP
.   B in_description
.   RS
Site description, will be put in <meta name="description"> tag in every html
page
.   RE
.   PP
.   B in_keywords
.   RS
Site keywords, will be put in <meta name="keywords"> tag in every html page
.   RE
.   PP
.   B in_author
.   RS
Author of the page, will be put in <meta name="author"> tag in every html page
.   RE
.   PP
.   B in_lang
.   RS
Site language in
.B ISO 639-1
format (like en, pl, it, jp)
.   RE
.   PP
.   B in_pygment
.   RS
Pygment variant (color set) to use for generated code blocks (~~~ tag in
markdown)
.   RE
.   PP
.   B in_style
.   RS
What style to use to generate page
.   RE
.RE
.PP
.B header.in
(optional)
.RS
Pure html code that will be put right after <body> tag between
<div id="header"> and </div> in every generated page
.RE
.PP
.B footer.in
(optional)
.RS
Pure html code that will be put right before </body> tag between
<div id="footer"> and </div> in every generated page
.RE
.PP
.B .kursg-ignore
(optional
.RS
If this file is present, that directory and all directories down the path will
be ignored and pages won't be generated for them.
Consider following directory tree
.PP
.EX
    .
    ├── d1
    │   ├── .kursg-ignore
    │   ├── d3
    │   │   └──d4
    │   └── d5
    └── d2
.EE
.PP
In that example,
.B d1
contains
.B .kursg-ignore
and thus will be ignored.
But
.BR d3 ,
.B d4
and
.B d5
all contains
.B .kursg-ignore
in path above then, and thus will be ignored too.
.RE
.PP
.B .kursg-info
(optional)
.RS
Tune how to generate html for the directory if directory does not have
matching source file - that means folder exist but file with the same
name (excluding extension) does not.
Consider following example:
.PP
.EX
    .
    ├── sub1
    │   └── .kursg-info
    ├── sub1.md
    └── sub2
        └── .kursg-info
.EE
.PP
In this example
.B sub1
has matching source file
.B sub1.md
and
.B sub1/.kursg-info
file will be ignored, as all information on how to generate access to
.B sub1
directory will be read from
.B sub1.md file.
.PP
Check
.B META FIELDS
to see accepted fields.
.RE
.PP
.B custom.css
(optional)
.RS
If this file is present, it will be added to generated site after css from
.BR in_style ,
so any css option can be overwritten or extended here
.RE
.PP
.B static.in
(optional)
.RS
This is list of files or directories that should be copied into
.B static
directory in
.BR output .
Directories are copied in recursive mode.
Pathsshould be relative to
.B input
path.
.RE
