.TH "KURSG" "1" "18 January 2018 (v1.0.0)" "bofc.pl"

.SH NAME

\fBkursg\fR - \fBkur\fRwinet \fBs\fRite \fBg\fRenerator. Generates simple static
webpages from markdown and html files.

.SH SYNOPSIS

kursg [options]

.SH OPTIONS

.TP
\fB-h\fR
print this help message and exit

.TP
\fB-i\fR <\fIpath\fR>
directory to process

.TP
\fB-o\fR <\fIpath\fR>
output directory

.TP
\fB-d\fR
delete output directory before generating

.SH DESCRIPTION

\fBkursg\fR is very simple static site generator. It's purpose is to create
sites that focus on content rather than look or dynamic javascript features.
Main strength of this program is that creating source for site is very easy,
just create couple of simple control files and bunch of markdown or html and
then run \fBkursg\fR on that directory and you're done.

.SH "GENERATION RULES"

\fBBASIC USAGE\fR

.RS 4

In the most basic usage program simply iterates through all \fBmarkdown\fR,
\fBhtml\fR files and \fBdirectories\fR and for each file creates static site.

Consider following source tree with \fBmarkdown\fR files

.nf
\&.
├── header.in
├── footer.in
├── index.in
├── index.md
├── sub1
│   ├── page1.md
│   └── page2.md
├── sub2
│   └── page3.md
└── sub3
    ├── page4.md
    ├── page5.md
    ├── page6.md
    └── sub4
        ├── page7.md
        └── page8.md
.fi

For such source, following structure of \fBhtml\fR files will be generated.

.nf
\&.
├── index.html
├── sub1
│   ├── page.html
│   └── page2.html
├── sub1.html
├── sub2
│   └── page3.html
├── sub2.html
├── sub3
│   ├── page4.html
│   ├── page5.html
│   ├── page6.html
│   ├── sub4
│   │   ├── page7.html
│   │   └── page8.html
│   └── sub4.html
└── sub3.html
.fi

Using above source tree and \fB./sub3/sub4/page7.md\fR file following site
will be generated

.nf
+----------------------------------------------------------------------+
| header                                                               |
+-------+-------+-------+----------------------------------------------+
| index | page4 | page7 | <contents of page7.md file>                  |
| sub1  | page5 | sute8 |                                              |
| sub2  | page6 |       |                                              |
| sub3  | sub4  |       |                                              |
+-------+-------+-------+----------------------------------------------+
| footer                                                               |
+----------------------------------------------------------------------+
.fi

Output directory structure will be same as input, so if program finds
\fBsub3/page4.md\fR file in input, in output directory \fBsub3/page4.html\fR
file will be created.

Menu is generated for each directory in path in cascade style. Each file or
directory will have exactly one entry in menu based on directory structure.  You
can think of menu as of some kind of file system that presents directories and
files.  If file \fB./sub3/sub4/page7.md\fR is parsed, program will generate
links for all files in root directory \fB.\/\fR, then \fBsub3\fR and then for
\fBsub4\fR. Each directory will have matching \fBhtml\fR file generated. This
file will contain menu for all directories in path and some content based on
options.

To better understand this behaviour let's follow parsing flow for file
\fB./sub3/sub4/page7.md\fR:

First header is generated from header.in file. Then we generate menu listing all
files and directories in root directory

.nf
+----------------------------------------------------------------------+
| header                                                               |
+-------+--------------------------------------------------------------+
| index |
| sub1  |
| sub2  |
| sub3  |
+-------+
.fi

Then program goes to another directory in path, that is \fBsub3\fR, and its
menu is appended next to first one. Generation rules for all menus are the same
- a simple list of files and directories

.nf
+----------------------------------------------------------------------+
| header                                                               |
+-------+-------+------------------------------------------------------+
| index | page4 |
| sub1  | page5 |
| sub2  | page6 |
| sub3  | sub4  |
+-------+-------+
.fi

By analogy, next directory is parsed, that is \fBsub4\fR and we get

.nf
+----------------------------------------------------------------------+
| header                                                               |
+-------+-------+-------+----------------------------------------------+
| sub1  | page4 | page7 |
| sub2  | page5 | sute8 |
| sub3  | page6 |       |
| page0 | sub4  |       |
+-------+-------+-------+
.fi

Finally, we detect that \fBpage7.md\fR is a file, and we generate \fBhtml\fR
from that file and we append it to the site.

.nf
+----------------------------------------------------------------------+
| header                                                               |
+-------+-------+-------+----------------------------------------------+
| sub1  | page4 | page7 | <contents of page7.md file>                  |
| sub2  | page5 | sute8 |                                              |
| sub3  | page6 |       |                                              |
| page0 | sub4  |       |                                              |
+-------+-------+-------+----------------------------------------------+
.fi

And last but not least, footer is appended and we get complete site.

.nf
+----------------------------------------------------------------------+
| header                                                               |
+-------+-------+-------+----------------------------------------------+
| index | page4 | page7 | <contents of page7.md file>                  |
| sub1  | page5 | sute8 |                                              |
| sub2  | page6 |       |                                              |
| sub3  | sub4  |       |                                              |
+-------+-------+-------+----------------------------------------------+
| footer                                                               |
+----------------------------------------------------------------------+
.fi

.RE

\fBMATCHING FILES\fR

.RS 4

Matching file is a file which has same name (excluding extension) as directory
in the same folder. ie:

.nf
\&.
├── sub1.md
└── sub1
    └── page1.md
.fi

Normally, \fBkursg\fR would automatically generate \fBsub1.html\fR page with
content of \fBpage1.md\fR. By providing \fImatching file\fR, \fBsub1.html\fR
will be generated with contents of \fBsub1.md\fR file. \fBpage1.md\fR will still
be reachable from \fBsub1.html\fR file from menu.

.RE

\fBDIRECTORIES WITHOUT FILES\fR

.RS 4

If needed, directories can contain only other directories and no \fBmarkdown\fR
or \fBhtml\fR files. If that is the case, \fBkursg\fR will try to find any file
it could use as content-file.

Consider following source tree:

.nf
\&.
├── index.md
├── sub1
│   ├── page1.md
│   └── sub2
│       └── sub3
└── sub2
    ├── sub5
    ├── sub6
    │   └── sub8
    │       └── page2.md
    └── sub7
        └── page3.md
.fi

With such tree main page will look like this:

.nf
+----------------------------------------------------------------------+
| header                                                               |
+-------+--------------------------------------------------------------+
| index | <contents of index.md file>                                  |
| sub1  |                                                              |
| sub2  |                                                              |
+-------+--------------------------------------------------------------+
| footer                                                               |
+----------------------------------------------------------------------+
.fi

Now when opening site \fBsub1\fR we'll see

.nf
+----------------------------------------------------------------------+
| header                                                               |
+-------+-------+------------------------------------------------------+
| index | page1 | <contents of page1.md file >                         |
| sub1  |       |                                                      |
| sub2  |       |                                                      |
+-------+-------+------------------------------------------------------+
| footer                                                               |
+----------------------------------------------------------------------+
.fi

Note that \fBsub2\fR and \fBsub3\fR were not included in menu, that is because
menu entry is not generated if there are no useful files that could be used as
content, and genereting empty links has no real value.

If we open \fBsub2\fR page, we'll see this

.nf
+----------------------------------------------------------------------+
| header                                                               |
+-------+-------+-------+-------+--------------------------------------+
| index | sub6  | sub8  | page2 | <contents of page2.md file>          |
| sub1  | sub7  |       |       |                                      |
| sub2  |       |       |       |                                      |
+-------+-------+-------+-------+--------------------------------------+
| footer                                                               |
+----------------------------------------------------------------------+
.fi

Entry for \fBsub5\fR was not generated, because it is empty. \fBsub6\fR, altough
empty, was generated because there was at least one usable file somewhere in
the directories below. \fBsub6\fR \fBsub8\fR and \fBpage2\fR will render same
page.

.RE

\fBLINKS RULES\fR

.RS 4

Links can both relative or absolute. Absolute links are not recommended, as such
links will not be reachable when site is viewed directly via files, and not by
www server. Links should always point to generated \fBhtml\fR files.

.RE

.SH "META FIELDS"

All \fBmarkdown\fR, \fBhtml\fR or \fB.kursg-info\fR file can contain some meta
fields to tune how to generate that file. All fields are optionally.

Since all files have different syntax, each file type need to define these
fields differently. Syntax with examples for each filetype is

\fBmarkdown\fR
.RS 4

.BI [kursg-meta]:\ #\ ( "<field-name>" :\  "<field-value>" )

[kursg-meta]: # (title: about me)
.br
[kursg-meta]: # (order: 3)

.RE

\fBhtml\fR
.RS 4

.BI <!--\ [kursg-meta: "<field-name>" ]\  "<field-value>" \ -->

<!-- [kursg-meta:title] about me -->
.br
<!-- [kursg-meta:order] 3 -->

.RE

\fB.kursg-info file\fR
.RS 4

.IB <field-name> ": " <field-value>

title: about me
.br
order: 3

.RE

\fBtitle\fR
.RS 4

Name of the entry in menu that will link to file. If this is not set, file name
will be used instead

.RE

\fBorder\fR
.RS 4

Order in which menu entry will appear in menu. Lower value means higher
priority and entry will be put earlier in <li>

.RE

\fBindex\fR (only available in \fB.kursg-info\fR file)
.RS 4

If directory has no matching file (see \fB.kursg-info\fR in \fBCONTROL FILES\fR
for more information about what is a matching file) this file will be used to
generate content when generating site for this directory. If this option is not
passed, first found file (alphabetically) will be used instead. If no files
are inside folder, \fBkursg\fR will try to find proper file recursively.
File must be in the same directory as \fB.kursg-info\fR so entry
\fBfilename.md\fR is allowed by \fBdirectory/filename.md\fR is invalid.

.RE

.SH "CONTROL FILES"

Control files are used to tune how site will be generated. Only \fBindex.in\fR
file is mandatory

\fBindex.in\fR (mandatory)
.RS 4

Mandatory file, defines most basic information like title of style Format of the
file is 'key="value"' (note there is no space between key, = and "value").
Following keys are supported

.   B in_title
.   RS 4

Site title, will be put in <title> tag in every html page

.   RE

.   B in_description
.   RS 4

Site description, will be put in <meta name="description"> tag in every html page

.   RE

.   B in_keywords
.   RS 4

Site keywords, will be put in <meta name="keywords"> tag in every html page

.   RE

.   B in_author
.   RS 4

Author of the page, will be put in <meta name="author"> tag in every html page

.   RE

.   B in_lang
.   RS 4

Site language in \fBISO 639-1\fR format (like en, pl, it, jp)

.   RE

.   B in_pygment
.   RS 4

Pygment variant (color set) to use for generated code blocks (~~~ tag in
markdown)

.   RE

.   B in_style
.   RS 4

What style to use to generate page

.   RE
.RE

\fBheader.in\fR (optional)
.RS 4

Pure html code that will be put right after <body> tag between
<div id="header"> and </div> in every generated page

.RE

\fBfooter.in\fR (optional)
.RS 4

Pure html code that will be put right before </body> tag between
<div id="footer"> and </div> in every generated page

.RE

\fB.kursg-ignore\fR (optional)
.RS 4

If this file is present, that directory and all directories down the path will
be ignored and pages won't be generated for them. Consider following directory
tree

.nf
\$.
├── d1
│   ├── .kursg-ignore
│   ├── d3
│   │   └──d4
│   └── d5
└── d2
.fi

In that example, \fBd1\fR contains \fB.kursg-ignore\fR and thus will be ignored.
But \fBd3\fR, \fBd4\fR and \fBd5\fR all contains \fB.kursg-ignore\fR in path
above then, and thus will be ignored too.

.RE

\fB.kursg-info\fR (optional)
. RS 4

Tune how to generate html for the directory if directory does not have
matching source file - that means folder exist but file with the same
name (excluding extension) does not. Consider following example

.nf
\$.
├── sub1
│   └── .kursg-info
├── sub1.md
└── sub2
    └── .kursg-info
.fi

In this example \fBsub1\fR has matching source file \fBsub1.md\fR and
\fBsub1/.kursg-info\fR file will be ignored, as all information on how to
generate access to \fBsub1\fR directory will be read from \fBsub1.md\fR file.

Check \fBMETA FIELDS\fR to see accepted fields.

.RE

\fBcustom.css\fR (optional)
.RS 4

If this file is present, it will be added to generated site after css from
\fBin_style\fR, so any css option can be overwritten or extended here

.RE

\fBstatic.in\fR (optional)
.RS 4

This is list of files or directories that should be copied into \fBstatic\fR
directory in \fBoutput\fR. Directories are copied in recursive mode. Paths
should be relative to \fBinput\fR path.

.RE 4
