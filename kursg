#!/usr/bin/env bash

## ==========================================================================
#   Licensed under BSD 2clause license. See LICENSE file for more information
#   Author: Michał Łyszczek <michal.lyszczek@bofc.pl>
## ==========================================================================


## ==========================================================================
#               ____                     __   _
#              / __/__  __ ____   _____ / /_ (_)____   ____   _____
#             / /_ / / / // __ \ / ___// __// // __ \ / __ \ / ___/
#            / __// /_/ // / / // /__ / /_ / // /_/ // / / /(__  )
#           /_/   \__,_//_/ /_/ \___/ \__//_/ \____//_/ /_//____/
#
## ==========================================================================


## ==========================================================================
#   prints help, what else would show_help function do?
## ==========================================================================


show_help()
{
    echo "kursg [options]"
    echo ""
    echo -e "\t-h        print this help message"
    echo -e "\t-i<path>  directory to process"
    echo -e "\t-o>path>  output directory"
    echo -e "\t-d        delete output directory before generating"
}


## ==========================================================================
#   builds html, head and header section for given file
## ==========================================================================


build_index()
{
    local o="${1}"     # absolute path to file where index will be printed
    local d="${2}"     # depth of generated file in regard of root

    local prefix="./"  # prefix to use for relative paths

    ###
    # make all echo redirect to $o file
    #

    exec 6>&1
    exec 1<>"${o}"

    ###
    # truncate file if it already exists
    #

    truncate -s0 "${o}"

    ###
    # generate relative prefix for css content
    #

    for c in $(seq 1 1 ${d})
    do
        prefix+="../"
    done

    ###
    # build index and meta information from index.in
    #

    echo '<!DOCTYPE html>'
    echo '<html lang="'${in_lang}'">'
    echo '<head>'
    echo '<title>'$in_title'</title>'
    echo '<link rel="stylesheet" type="text/css; charset=utf-8" href="'${prefix}'style.css">'
    echo '<link rel="stylesheet" type="text/css" href="'${prefix}'pygment.css">'

    if [ -f "${in}/custom.css" ]
    then
        echo '<link rel="stylesheet" type="text/css" href="'${prefix}'custom.css">'
    fi

    echo '<meta charset="UTF-8">'
    echo '<meta name="description" content="'${in_description}'">'
    echo '<meta name="keywords" content="'${in_keywords}'">'
    echo '<meta name="author" content="'${in_author}'">'
    echo '</head>'
    echo '<body>'
    echo '<div id="header">'

    ###
    # print user defined header (logo or something like that)
    #

    cat "${in}/header.in"

    echo '</div>'

    ###
    # restore echo output
    #

    exec 1>&6 6>&-
}


## ==========================================================================
#   prints ending body and html to output file
## ==========================================================================


close_index()
{
    local o="${1}"  # absolute path to file where index will be printed

    echo '</body>' >> "${o}"
    echo '</html>' >> "${o}"
}


## ==========================================================================
#   retrieves meta object  from given file  (or directory),  value is echoed
#   end if value was not found for given field, empty string is returned
## ==========================================================================


get_kursg_meta()
{
    local file="${1}"        # file (or directory) to retrieve value from
    local field="${2}"       # field to get value for

    local ext="${file##*.}"  # extension of file to read value from
    local skip_last_chars=0  # number of character to remove from read value
    local tmp=

    if [ "${ext}" = "md" ]
    then
        tmp="$(grep "^\[kursg-meta\]: # (${field}: " "${file}" | cut -f4- -d\ )"
        skip_last_chars=1
    elif [ "${ext}" = "html" ] || [ "${ext}" = "htm" ]
    then
        tmp="$(grep "^<"'!'"-- \[kursg-meta:${field}\]" "${file}" | cut -f3- -d\ )"
        skip_last_chars=4
    elif [ -d "${file}" ]
    then
        tmp="$(grep "^${field}:" "${file}/.kursg-info" 2>/dev/null | cut -f2- -d\ )"
        skip_last_chars=0
    else
        ###
        # file extension not recognized, exit
        #

        return
    fi

    if [ -z "${tmp}" ]
    then
        ###
        # field wasn't found, return nothing
        #

        return
    fi

    ###
    # echo value and strip trailing ')'
    #

    if [ $skip_last_chars -eq 0 ]
    then
        echo "${tmp}"
    else
        echo "${tmp:0:-${skip_last_chars}}"
    fi
}


## ==========================================================================
#   reads title  meta-object from given file,  returns empty string if title
#   couldn't have been found. title field will be used as name for <a> later
## ==========================================================================


get_meta_title()
{
    local file="${1}"  # file to read title from

    local title="$(get_kursg_meta "${file}" "title")"

    if [ ! -z "${title}" ]
    then
        echo "${title}"
        return
    fi

    ###
    # title wasn't set in file, well then just use file name
    #

    basefile="$(basename ${file})"
    echo ${basefile%.*}
}


## ==========================================================================
#   reads order meta-object from given file. order field determines in what
#   order generated pages will appear in "<li><a>" objects. If order is not
#   define, order 9999 is returned
## ==========================================================================


get_meta_order()
{
    local file="${1}"  # file to read order from

    local order="$(get_kursg_meta "${file}" "order")"

    if [ -z "${order}" ]
    then
        ###
        # order was not set, apply maximum possible order and let it be sorted
        # alphabetically, after files that have order set
        #

        echo "9999"
        return
    fi

    printf "%04d" "${order}"
}


## ==========================================================================
#   builds menu (using <li><a> construct) for current passed directory and
#   all previous directories in tree.
## ==========================================================================


build_menu()
{
    local dname="${1}"    # directory to generate menu for
    local outfile="${2}"  # file where to save generated menu
    local depth="${3}"    # how deep in tree is outfile (used for prefix)
    local filename="${4}" # name of file that is processed upstream
    local fileindex="${5}" # page that will be rendered at the end

    local menu=           # variable to hold generated menu
    local dir=            # holds currently directory that is parsed
    local prefix="./"     # prefix to use for link generation
    local dirnum=0        # number of directories parsed.
    local dnamea=         # splited variable dname
    local i=0             # iterator
    local adir=

    ###
    # generate relative prefix for site links
    #

    for c in $(seq 1 1 ${depth})
    do
        prefix+="../"
    done

    IFS=$'/'
    dnamea=($dname)

    adir="${dnamea[0]}"
    for d in ${dname}
    do
        ((i++))
        dir+="${d}"
        adir+="/${dnamea[${i}]}"
        ((dirnum++))

        menu+='<div class="menu">'
        menu+='<ul class="menu">'
        menu_links=

        cd "${in}/${dir}" 2> /dev/null
        while IFS= read -r -d $'\0' f
        do
            f="$(basename "${f}")"
            file_title="$(get_meta_title "${f}")"
            file_order="$(get_meta_order "${f}")"
            file_name=${f%.*}
            aclass="menu"

            if [ "${dir}/${f}" = "${adir}" ] || \
               [ "${dir}/${f}" = "${adir}.md" ] || \
               [ "${dname}/${filename}" = "${dir}/${f}" ] || \
               [ "${dname}/${f}" = "${dname}/${fileindex}" ]
            then
                aclass="menu-active"
            fi

            content_filee=
            while IFS=  read -r -d $'\0' r
            do
                content_filee="${r}"
                break
            done < <(find "${f}" \( -name "*.md" -o -name "*.html" \) -print0 | sort -z)

            if [ -z "${content_filee}" ]
            then
                ###
                # current directory has not valid failes anywhere down the path
                # and thus we don't generate link to that empty site
                #

                continue
            fi

            if [ -d "${f}" ]
            then
                if [ -f "${f}/.kursg-ignore" ] || [ "${f}" = "." ] || \
                   [ -f "${f}.md" ] || [ -f "${f}.html" ]
                then
                    continue
                fi

                file_name="${f}"
            fi

            path=$(echo "${dir}/${file_order}-${file_name}.html" | cut -c3-)
            path="${prefix}${path}"
            menu_links+="<li class=\"menu\"><a class=\"${aclass}\" href=\"${path}\">"
            menu_links+="${file_title}</a></li>\n"
        done < <(find . -maxdepth 1 \( -name "*.md" -o -name "*.html" -o -type d \) -print0)
        cd - > /dev/null
        IFS=$'/'

        menu_links="$(echo -e "${menu_links}" | sort -t\" +5)"
        menu_links="$(echo -e "${menu_links}" | \
            sed "/href=\"/ { s/[0-9][0-9][0-9][0-9]-//g }")"
        menu+="${menu_links}"
        menu+='</ul>'
        menu+='</div>'
        menu+='<div class="content">'
        dir+='/'
    done
    IFS=

    echo "${menu}" >> "${outfile}"

    ###
    # return number of created <div class="content"> so upper layer can
    # close them all later when it has filled content with data
    #

    echo "${dirnum}"
}


## ==========================================================================
#   checks if any directory in path contains .kursg-ignore. Returns true
#   if path should not be parsed, or false if folder should not be ignored
## ==========================================================================


is_ignored()
{
    local dir="${1}"  # path to check for .kursg-ignore file

    while true
    do
        if [ -f "${dir}/.kursg-ignore" ]
        then
            return 0
        fi

        dir="$(dirname "${dir}")"

        if echo "${dir}" | grep -v '/' > /dev/null
        then
            ###
            # no more directories in path, do one more check and exit
            #

            if [ -f "${dir}/.kursg-ignore" ]
            then
                return 0
            fi

            return 1
        fi
    done
}


## ==========================================================================
#                                __                __
#                         _____ / /_ ____ _ _____ / /_
#                        / ___// __// __ `// ___// __/
#                       (__  )/ /_ / /_/ // /   / /_
#                      /____/ \__/ \__,_//_/    \__/
#
## ==========================================================================


###
# parse input parameters
#

out="$(pwd)/kurwigen_out"
in="$(pwd)"
delete=0
OPTIND=1

while getopts "h?i:o:d" opt
do
    case "${opt}" in
    h|\?)
        show_help
        exit 0
        ;;

    i)
        in="$(pwd)/${OPTARG}"
        ;;

    o)
        out="$(pwd)/${OPTARG}"
        ;;

    d)
        delete=1
        ;;
    esac
done

echo "in:           ${in}"
echo "out:          ${out}"

###
# source config file
#

. "${in}/index.in"

###
# checking whether markdown_py is present
#

markdown_extensions="-x markdown.extensions.fenced_code -x markdown.extensions.codehilite -x markdown.extensions.toc -x markdown.extensions.admonition -x markdown.extensions.tables -x markdown.extensions.attr_list"
markdown=$(which markdown_py)

if [ ! -x "${markdown}" ]
then
    echo "python markdown (markdown_py) was not found on the system"
    exit 1
fi

markdown="${markdown} ${markdown_extensions}"

###
# sanity check of output directory
#

if [ ${delete} -eq 1 ]
then
    echo "Do you want to delete ${out} directory recursively? Type 'yes' if so."
    read answer

    if [ "x$answer" = "xyes" ]
    then
        rm -rf $out
    fi
fi

[ -d "${out}" ] || mkdir "${out}"

###
# add .kursg-ignore to out directory, so we don't include it in parsing,
# we will remove it after parsing
#

touch "${out}/.kursg-ignore"

###
# look for resource directory
#

res=  # directory with resource (css styles)

tres="$(cd "$(dirname "${0}")" && pwd)"

if [ -d "${tres}/styles" ]
then
    res="${tres}"

elif [ -d "/usr/local/share/kursg/styles" ]
then
    res="/usr/local/share/kursg"

elif [ -d "/usr/share/kursg/styles" ]
then
    res="/usr/share/kursg"

else
    echo "could not found resource directory"
    exit 1
fi

echo "resources:    ${res}"

###
# now we can start building the site
#

cd "${in}"

###
# process all *.md and *.html
#

find . \( -name "*.md" -o -name "*.html" \) -print0 | while IFS= read -r -d $'\0' f
do
    file="$(basename "${f}")" # name of file to process
    dname="$(dirname "${f}")" # path in regard of ${in} where file is
    fname="${file%.*}"        # file name without extension
    ext="${file##*.}"         # and extension of the file itself
    outfile="${out}/${dname}/${fname}.html" # output html file
    depth="$(echo "${dname}" | tr -cd '/' | wc -c)"

    echo -n "processing file: ${f} "

    if is_ignored "${dname}"
    then
        echo '[ ignored ]'
        continue
    fi

    mkdir -p "${out}/${dname}"
    build_index "${outfile}" "${depth}"

    if [ "${f%.*}" = "${dname}/${fname}" ] && [ -d "${dname}/${fname}" ]
    then
        ###
        # currently parsed file (like subsite.md) has corresponding directory
        # (subsite). In such case we need to generate menu for subsite dir to
        # be included in subsite.html file
        #

        dname+="/${fname}"
    fi

    ###
    # generate menu tree for file
    #

    dirnum="$(build_menu "${dname}" "${outfile}" "${depth}" "${file}")"

    ###
    # generate html output,
    #

    if [ "${ext}" = "md" ]
    then
        eval "${markdown}" "\"${f}\"" >> "${outfile}"
    else
        cat "${f}" >> "${outfile}"
    fi

    ###
    # closing all opened <div class="content"> tags
    #

    for i in $(seq 1 1 ${dirnum})
    do
        echo '</div>' >> "${outfile}"
    done

    ###
    # add footer
    #

    echo "<div id="footer">" >> "${outfile}"
    cat "${in}/footer.in" >> "${outfile}"
    echo "</div>" >> "${outfile}"

    close_index "${outfile}"
    echo "[ ok ]"
done

###
# process all folders that don't have matchin file with content
#

find . -type d -print0 | while IFS= read -r -d $'\0' dir
do
    echo -n "processing directory: ${dir} "

    if is_ignored "${dir}"
    then
        echo "[ ignored ]"
        continue
    fi

    root_dir="$(pwd)"
    cd "${dir}"
    find . -maxdepth 1 -type d -print0 | while IFS= read -r -d $'\0' d
    do
        if [ -f "${d}.md" ] || [ -f "${d}.html" ] || [ "${d}" = "." ]
        then
            ###
            # folder has coresponding source file and it was already parsed
            # earlier, ignoring
            #
            # also we skip if folder name is .
            #

            continue
        fi

        dir_save="${dir}"
        file_name="$(basename "${d}")"
        file_title="$(get_meta_title "${d}")"
        file_index="$(get_kursg_meta "${d}" "index")"
        outfile="${out}/${dir}/${file_name}.html"
        depth="$(echo "${dir}" | tr -cd '/' | wc -c)"
        menu_file="${dir}/${file_name}"
        file_dir="./"

        if [ $(find "${d}" -maxdepth 1 \( -name "*.md" -o -name "*.html" \) \
            | wc -l) -eq 0 ]
        then
            ###
            # this directory contains no files, try to find any directory
            # below that may contain some contents
            #

            content_file=
            while IFS=  read -r -d $'\0' r
            do
                content_file="${r}"
                break
            done < <(find "${d}" \( -name "*.md" -o -name "*.html" \) -print0 | sort -z)

            if [ -z "${content_file}" ]
            then
                ###
                # there is nothing here to create site with, ignore
                #

                continue
            fi
            new_dir="$(dirname "${content_file:1}")"
            dir+="${new_dir}"
            d="."
            file_dir+="${new_dir}"
            menu_file="${dir}"
        fi

        cd "${file_dir}"

        if [ -z "${file_index}" ]
        then
            ###
            # index file not defined, try to find one to use
            #

            while IFS=  read -r -d $'\0' r
            do
                file_index="$(basename "${r}")"
                break
            done < <(find "${d}" -maxdepth 1 \( -name "*.md" -o -name "*.html" \) -print0 | sort -z)
        fi

        build_index "${outfile}" "${depth}"
        dirnum="$(build_menu "${menu_file}" "${outfile}" "${depth}" \
            "${file_name}" "${file_index}")"
        mkdir -p "${out}/${dir}"
        #dirnum="$(build_menu "${dir}/${file_name}" "${outfile}" "${depth}")"

        if [ -f "${d}/${file_index}" ]
        then
            if [ "${file_index##*.}" = "md" ]
            then
                eval "${markdown}" "\"${d}/${file_index}\"" >> "/tmp/kursg-file-index"
            else
                cat "${d}/${file_index}" > /tmp/kursg-file-index
            fi

            prefix="."
            for c in $(seq 1 1 ${depth})
            do
                prefix+="/.."
            done

            if [ -z "${new_dir}" ]
            then
                sed -i "s:href=\"\.:href=\"${prefix}/${dir:2}/${d}/.:gI" /tmp/kursg-file-index
            else
                sed -i "s:href=\"\.:href=\"${prefix}${new_dir}/.:gI" /tmp/kursg-file-index
            fi
            #sed -i '/href=\"\.\.\//I { s/\.\.\//\.\//g }' /tmp/kursg-file-index

            cat /tmp/kursg-file-index >> "${outfile}"
            rm /tmp/kursg-file-index
        fi

        ###
        # closing all opened <div class="content"> tags
        #

        for i in $(seq 1 1 ${dirnum})
        do
            echo '</div>' >> "${outfile}"
        done

        ###
        # add footer
        #

        echo "<div id="footer">" >> "${outfile}"
        cat "${in}/footer.in" >> "${outfile}"
        echo "</div>" >> "${outfile}"

        close_index "${outfile}"
        dir="${dir_save}"
        cd "${root_dir}/${dir}"
    done
    cd "${root_dir}"
    echo "[ ok ]"
done

outbase="$(basename ${out})"
rm "${out}/.kursg-ignore"
rm -f "${out}/${outbase}.html"

###
# copy chosen style and pygment
#

cp "${res}/styles/${in_style}.css" "${out}/style.css"
cp "${res}/pygments/${in_pygment}.css" "${out}/pygment.css"

###
# copy static files to output
#

if [ -f "${in}/custom.css" ]
then
    cp "${in}/custom.css" "${out}"
fi

if [ ! -f "${in}/static.in" ]
then
    ###
    # static.in doesn't exist, don't copy anything
    #

    exit 0
fi

IFS=$'\n'
for d in $(cat "${in}/static.in")
do
    cp -r "${in}/${d}" "${out}"
done
unset IFS
